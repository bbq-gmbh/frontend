// This file is auto-generated by @hey-api/openapi-ts

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * LoginRequest
 */
export type LoginRequest = {
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
};

/**
 * PasswordChangeRequest
 */
export type PasswordChangeRequest = {
    /**
     * Current Password
     */
    current_password: string;
    /**
     * New Password
     */
    new_password: string;
};

/**
 * Token
 */
export type Token = {
    /**
     * Token
     */
    token: string;
    token_type?: TokenType;
};

/**
 * TokenPair
 */
export type TokenPair = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Refresh Token
     */
    refresh_token: string;
    token_type?: TokenType;
};

/**
 * TokenType
 */
export type TokenType = 'bearer';

/**
 * UserCreate
 */
export type UserCreate = {
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
};

/**
 * UserRead
 */
export type UserRead = {
    /**
     * Id
     */
    id: string;
    /**
     * Username
     */
    username?: string | null;
    /**
     * Is Superuser
     */
    is_superuser?: boolean | null;
    /**
     * Created At
     */
    created_at?: string | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type ListUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/';
};

export type ListUsersResponses = {
    /**
     * Response Listusers
     * Successful Response
     */
    200: Array<UserRead>;
};

export type ListUsersResponse = ListUsersResponses[keyof ListUsersResponses];

export type CreateUserData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/users/';
};

export type CreateUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
    /**
     * Successful Response
     */
    201: UserRead;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type RegisterUserData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type RegisterUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterUserError = RegisterUserErrors[keyof RegisterUserErrors];

export type RegisterUserResponses = {
    /**
     * Successful Response
     */
    200: TokenPair;
};

export type RegisterUserResponse = RegisterUserResponses[keyof RegisterUserResponses];

export type LoginUserData = {
    body: LoginRequest;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type LoginUserErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginUserError = LoginUserErrors[keyof LoginUserErrors];

export type LoginUserResponses = {
    /**
     * Successful Response
     */
    200: TokenPair;
};

export type LoginUserResponse = LoginUserResponses[keyof LoginUserResponses];

export type LogoutAllSessionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/logout-all';
};

export type LogoutAllSessionsResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type LogoutAllSessionsResponse = LogoutAllSessionsResponses[keyof LogoutAllSessionsResponses];

export type RefreshAccessTokenData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/refresh';
};

export type RefreshAccessTokenResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type RefreshAccessTokenResponse = RefreshAccessTokenResponses[keyof RefreshAccessTokenResponses];

export type ChangePasswordData = {
    body: PasswordChangeRequest;
    path?: never;
    query?: never;
    url: '/auth/change-password';
};

export type ChangePasswordErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ChangePasswordError = ChangePasswordErrors[keyof ChangePasswordErrors];

export type ChangePasswordResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type ChangePasswordResponse = ChangePasswordResponses[keyof ChangePasswordResponses];

export type ReadRootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type ReadRootGetResponses = {
    /**
     * Response Read Root  Get
     * Successful Response
     */
    200: {
        [key: string]: string;
    };
};

export type ReadRootGetResponse = ReadRootGetResponses[keyof ReadRootGetResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:3001' | (string & {});
};
