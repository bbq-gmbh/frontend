// This file is auto-generated by @hey-api/openapi-ts

/**
 * HTTPValidationError
 */
export type HttpValidationError = {
    /**
     * Detail
     */
    detail?: Array<ValidationError>;
};

/**
 * LoginRequest
 */
export type LoginRequest = {
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
};

/**
 * PasswordChangeRequest
 */
export type PasswordChangeRequest = {
    /**
     * Current Password
     */
    current_password: string;
    /**
     * New Password
     */
    new_password: string;
};

/**
 * Token
 */
export type Token = {
    /**
     * Token
     */
    token: string;
    token_type?: TokenType;
};

/**
 * TokenPair
 */
export type TokenPair = {
    /**
     * Access Token
     */
    access_token: string;
    /**
     * Refresh Token
     */
    refresh_token: string;
    token_type?: TokenType;
};

/**
 * TokenType
 */
export type TokenType = 'bearer';

/**
 * UserCreate
 */
export type UserCreate = {
    /**
     * Username
     */
    username: string;
    /**
     * Password
     */
    password: string;
};

/**
 * UserRead
 */
export type UserRead = {
    /**
     * Id
     */
    id: string;
    /**
     * Username
     */
    username?: string | null;
    /**
     * Is Superuser
     */
    is_superuser?: boolean | null;
    /**
     * Created At
     */
    created_at?: string | null;
};

/**
 * ValidationError
 */
export type ValidationError = {
    /**
     * Location
     */
    loc: Array<string | number>;
    /**
     * Message
     */
    msg: string;
    /**
     * Error Type
     */
    type: string;
};

export type ListUsersUsersGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users/';
};

export type ListUsersUsersGetResponses = {
    /**
     * Response List Users Users  Get
     * Successful Response
     */
    200: Array<UserRead>;
};

export type ListUsersUsersGetResponse = ListUsersUsersGetResponses[keyof ListUsersUsersGetResponses];

export type CreateUserUsersPostData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/users/';
};

export type CreateUserUsersPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateUserUsersPostError = CreateUserUsersPostErrors[keyof CreateUserUsersPostErrors];

export type CreateUserUsersPostResponses = {
    /**
     * Successful Response
     */
    201: UserRead;
};

export type CreateUserUsersPostResponse = CreateUserUsersPostResponses[keyof CreateUserUsersPostResponses];

export type RegisterAuthRegisterPostData = {
    body: UserCreate;
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type RegisterAuthRegisterPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type RegisterAuthRegisterPostError = RegisterAuthRegisterPostErrors[keyof RegisterAuthRegisterPostErrors];

export type RegisterAuthRegisterPostResponses = {
    /**
     * Successful Response
     */
    200: TokenPair;
};

export type RegisterAuthRegisterPostResponse = RegisterAuthRegisterPostResponses[keyof RegisterAuthRegisterPostResponses];

export type LoginAuthLoginPostData = {
    body: LoginRequest;
    path?: never;
    query?: never;
    url: '/auth/login';
};

export type LoginAuthLoginPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type LoginAuthLoginPostError = LoginAuthLoginPostErrors[keyof LoginAuthLoginPostErrors];

export type LoginAuthLoginPostResponses = {
    /**
     * Successful Response
     */
    200: TokenPair;
};

export type LoginAuthLoginPostResponse = LoginAuthLoginPostResponses[keyof LoginAuthLoginPostResponses];

export type LogoutAllAuthLogoutAllPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/logout-all';
};

export type LogoutAllAuthLogoutAllPostResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type LogoutAllAuthLogoutAllPostResponse = LogoutAllAuthLogoutAllPostResponses[keyof LogoutAllAuthLogoutAllPostResponses];

export type RefreshTokenAuthRefreshPostData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/auth/refresh';
};

export type RefreshTokenAuthRefreshPostResponses = {
    /**
     * Successful Response
     */
    200: Token;
};

export type RefreshTokenAuthRefreshPostResponse = RefreshTokenAuthRefreshPostResponses[keyof RefreshTokenAuthRefreshPostResponses];

export type ChangePasswordAuthChangePasswordPostData = {
    body: PasswordChangeRequest;
    path?: never;
    query?: never;
    url: '/auth/change-password';
};

export type ChangePasswordAuthChangePasswordPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ChangePasswordAuthChangePasswordPostError = ChangePasswordAuthChangePasswordPostErrors[keyof ChangePasswordAuthChangePasswordPostErrors];

export type ChangePasswordAuthChangePasswordPostResponses = {
    /**
     * Successful Response
     */
    204: void;
};

export type ChangePasswordAuthChangePasswordPostResponse = ChangePasswordAuthChangePasswordPostResponses[keyof ChangePasswordAuthChangePasswordPostResponses];

export type ReadRootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type ReadRootGetResponses = {
    /**
     * Response Read Root  Get
     * Successful Response
     */
    200: {
        [key: string]: string;
    };
};

export type ReadRootGetResponse = ReadRootGetResponses[keyof ReadRootGetResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:3001' | (string & {});
};
