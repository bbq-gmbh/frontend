// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, Client, TDataShape } from './client';
import type { ListUsersUsersGetData, ListUsersUsersGetResponses, CreateUserUsersPostData, CreateUserUsersPostResponses, CreateUserUsersPostErrors, RegisterAuthRegisterPostData, RegisterAuthRegisterPostResponses, RegisterAuthRegisterPostErrors, LoginAuthLoginPostData, LoginAuthLoginPostResponses, LoginAuthLoginPostErrors, LogoutAllAuthLogoutAllPostData, LogoutAllAuthLogoutAllPostResponses, RefreshTokenAuthRefreshPostData, RefreshTokenAuthRefreshPostResponses, ChangePasswordAuthChangePasswordPostData, ChangePasswordAuthChangePasswordPostResponses, ChangePasswordAuthChangePasswordPostErrors, ReadRootGetData, ReadRootGetResponses } from './types.gen';
import { client } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * List Users
 * Get a list of all users. Requires authentication.
 */
export const listUsersUsersGet = <ThrowOnError extends boolean = false>(options?: Options<ListUsersUsersGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListUsersUsersGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/users/',
        ...options
    });
};

/**
 * Create User
 * Create a new user.
 */
export const createUserUsersPost = <ThrowOnError extends boolean = false>(options: Options<CreateUserUsersPostData, ThrowOnError>) => {
    return (options.client ?? client).post<CreateUserUsersPostResponses, CreateUserUsersPostErrors, ThrowOnError>({
        url: '/users/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Register
 */
export const registerAuthRegisterPost = <ThrowOnError extends boolean = false>(options: Options<RegisterAuthRegisterPostData, ThrowOnError>) => {
    return (options.client ?? client).post<RegisterAuthRegisterPostResponses, RegisterAuthRegisterPostErrors, ThrowOnError>({
        url: '/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Login
 */
export const loginAuthLoginPost = <ThrowOnError extends boolean = false>(options: Options<LoginAuthLoginPostData, ThrowOnError>) => {
    return (options.client ?? client).post<LoginAuthLoginPostResponses, LoginAuthLoginPostErrors, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout All
 * Logs out from all devices by rotating the token key (invalidates all tokens).
 */
export const logoutAllAuthLogoutAllPost = <ThrowOnError extends boolean = false>(options?: Options<LogoutAllAuthLogoutAllPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<LogoutAllAuthLogoutAllPostResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/logout-all',
        ...options
    });
};

/**
 * Refresh Token
 * Refreshes an access token using a valid refresh token.
 */
export const refreshTokenAuthRefreshPost = <ThrowOnError extends boolean = false>(options?: Options<RefreshTokenAuthRefreshPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<RefreshTokenAuthRefreshPostResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/refresh',
        ...options
    });
};

/**
 * Change Password
 * Changes the current user's password and invalidates existing tokens.
 */
export const changePasswordAuthChangePasswordPost = <ThrowOnError extends boolean = false>(options: Options<ChangePasswordAuthChangePasswordPostData, ThrowOnError>) => {
    return (options.client ?? client).post<ChangePasswordAuthChangePasswordPostResponses, ChangePasswordAuthChangePasswordPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/auth/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Read Root
 */
export const readRootGet = <ThrowOnError extends boolean = false>(options?: Options<ReadRootGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ReadRootGetResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};
